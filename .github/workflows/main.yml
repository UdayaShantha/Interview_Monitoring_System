# Main workflow for CI/CD pipeline
name: Interview System CI/CD Pipeline

# Define when this workflow will run
on:
  push:
    branches: [ main ]  # Runs on pushes to main branch
  pull_request:
    branches: [ main ]  # Runs on pull requests targeting main branch

# Environment variables used throughout the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Define the sequence of jobs to run
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Check out the repository code
    - uses: actions/checkout@v2

    # Set up Java environment
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        
    # Cache Maven dependencies to speed up builds
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Build and test each service
    - name: Build and Test User Service
      run: |
        cd services/user-service
        mvn clean package
        
    - name: Build and Test Interview Service
      run: |
        cd services/interview-service
        mvn clean package
        
    - name: Build and Test Feedback Service
      run: |
        cd services/feedback-service
        mvn clean package
        
    - name: Build and Test Notification Service
      run: |
        cd services/notification-service
        mvn clean package

    # Run integration tests
    - name: Run Integration Tests
      run: |
        cd services
        mvn verify -P integration-tests

  # Security scanning job
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Run Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Build and push Docker images
  build-and-push-images:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v2
    
    # Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build and push each service's Docker image
    - name: Build and Push User Service
      uses: docker/build-push-action@v2
      with:
        context: ./services/user-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:latest
        
    - name: Build and Push Interview Service
      uses: docker/build-push-action@v2
      with:
        context: ./services/interview-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/interview-service:latest
        
    - name: Build and Push Feedback Service
      uses: docker/build-push-action@v2
      with:
        context: ./services/feedback-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/feedback-service:latest
        
    - name: Build and Push Notification Service
      uses: docker/build-push-action@v2
      with:
        context: ./services/notification-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:latest

  # Deployment job
  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    
    steps:
    - uses: actions/checkout@v2
    
    # Configure AWS credentials for deployment
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # Update Kubernetes configuration
    - name: Update kube config
      run: aws eks update-kubeconfig --name interview-system-cluster --region us-east-1
        
    # Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/deployments/
        kubectl apply -f k8s/services/
        kubectl apply -f k8s/ingress/
